package asteroids;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.imageio.ImageIO;
import javax.sound.sampled.*;
import java.util.*;
import java.io.File;

public class Astro extends Canvas {
    private static final long serialVersionUID = 6547631203294636711L; // auto-generated by VS Code

    public static final String TITLE = "Java Asteroids";
    public static final int WIDTH = 1280;
    public static final int HEIGHT = 720;
    public static final Map<String, Clip> sounds = new HashMap<String, Clip>();
    public static final Map<String, Animation> animations = new HashMap<String, Animation>();
    public static final ArrayList<Entity> entities = new ArrayList<Entity>();
    public static ArrayList<Entity> currentEntities;
    public static Ship ship;
    public static Saucer saucer;

    private boolean running;
    private JFrame window;
    private BufferStrategy strategy;
    private BufferedImage spritesheet, background;
    private Map<Integer, Boolean> keyStates = new HashMap<Integer, Boolean>();

    public Astro() {
        create_window();
        init_KeyState();
        load_sounds();

        // assets sourced from original FamTrinli project files
        // additional assets from https://opengameart.org
        // textures can be re-used for multiple animations
        // define which parts of each texture to use for each sprite/animation
        background = load_image("outerspace.jpg");
        spritesheet = load_image("spritesheet.png");
        animations.put("asteroid_lg", new Animation(spritesheet, 0, 384, 80, 80, 16, 0.15f));
        animations.put("asteroid_md", new Animation(spritesheet, 0, 464, 60, 60, 16, 0.15f));
        animations.put("asteroid_sm", new Animation(spritesheet, 0, 524, 40, 40, 16, 0.15f));
        animations.put("explosion_asteroid", new Animation(spritesheet, 0, 0, 192, 192, 32, 0.4f));
        animations.put("explosion_ship", new Animation(spritesheet, 0, 192, 192, 192, 32, 0.4f));
        animations.put("laser", new Animation(spritesheet, 1540, 384, 32, 48, 8, 0.4f));
        animations.put("laser_saucer", new Animation(spritesheet, 1540, 444, 32, 48, 8, 0.4f));
        animations.put("saucer", new Animation(spritesheet, 2200, 384, 45, 73, 6, 0.15f));
        animations.put("ship", new Animation(spritesheet, 1820, 384, 42, 140, 1, 0, -34));
        animations.put("ship_thrusting", new Animation(spritesheet, 1862, 384, 42, 140, 6, 0.25f, -34));

        ship = new Ship(WIDTH * 0.5f, HEIGHT * 0.5f);
        entities.add(ship);

        for (int i = 0; i < 4; i++) // create some initial asteroids
            Asteroid.spawn(animations.get("asteroid_lg"), 0, (int) random(HEIGHT));

        running = true;
    }

    public void run() {
        while (running) {
            handle_input();
            update();
            draw();
            try {
                Thread.sleep(16);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void create_window() {
        window = new JFrame(TITLE);

        JPanel panel = (JPanel) window.getContentPane();
        panel.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        panel.setLayout(null);
        panel.add(this); // put this Canvas inside the JPanel

        window.pack();
        window.setResizable(false);
        window.setLocationRelativeTo(null); // put window in the center of the screen
        window.setVisible(true);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.addWindowListener(new HandleWindowEvents());

        addKeyListener(new HandleKeyEvents());
        requestFocus();
        setBounds(0, 0, WIDTH, HEIGHT);
        setIgnoreRepaint(true);
        createBufferStrategy(2);
        strategy = getBufferStrategy();
    }

    private void init_KeyState() {
        keyStates.put(KeyEvent.VK_LEFT, false);
        keyStates.put(KeyEvent.VK_RIGHT, false);
        keyStates.put(KeyEvent.VK_UP, false);
        keyStates.put(KeyEvent.VK_Z, false);
    }

    private void load_sounds() {
        sounds.put("bang_lg", load_sound("bang_lg.wav"));
        sounds.put("bang_md", load_sound("bang_md.wav"));
        sounds.put("bang_sm", load_sound("bang_sm.wav"));
        sounds.put("laser", load_sound("laser.wav"));
        sounds.put("thrust", load_sound("thrust.wav"));
        sounds.put("saucer", load_sound("saucer.wav"));

        // neither OGG nor MP3 are supported formats
        sounds.put("background", load_sound("solveThePuzzle.aiff"));
        Clip clip = sounds.get("background");
        FloatControl volume = (FloatControl) clip.getControl(FloatControl.Type.MASTER_GAIN);
        volume.setValue(0.1f);
        clip.loop(Clip.LOOP_CONTINUOUSLY);
        clip.start();
    }

    private Clip load_sound(String filename) {
        Clip clip = null;
        try {
            AudioInputStream audio = AudioSystem.getAudioInputStream(new File("audio/" + filename));
            clip = AudioSystem.getClip();
            clip.open(audio);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return clip;
    }

    private BufferedImage load_image(String filename) {
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File("images/" + filename));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return image;
    }

    private class HandleWindowEvents extends WindowAdapter {
        public void windowClosing(WindowEvent e) {
            running = false;
        }
    }

    private class HandleKeyEvents extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
            keyStates.put(e.getKeyCode(), true);
        }

        public void keyReleased(KeyEvent e) {
            keyStates.put(e.getKeyCode(), false);
        }

        public void keyTyped(KeyEvent e) { // pressed and then released
            if (e.getKeyChar() == KeyEvent.VK_SPACE) {
                play(sounds.get("laser"));
                Laser.spawn(ship.x, ship.y, ship.heading);
            } else if (e.getKeyChar() == KeyEvent.VK_ESCAPE)
                running = false;
        }
    }

    private void handle_input() {
        if (keyStates.get(KeyEvent.VK_LEFT))
            ship.heading -= 0.075f;
        else if (keyStates.get(KeyEvent.VK_RIGHT))
            ship.heading += 0.075f;
        if (keyStates.get(KeyEvent.VK_Z))
            Laser.spawn(ship.x, ship.y, ship.heading); // lots 'o lasers!!!!
        ship.thrusting = keyStates.get(KeyEvent.VK_UP);
    }

    public static float random(int range) {
        return (float) Math.random() * range;
    }

    public static void play(Clip clip) {
        // if (!clip.isActive()) clip.setFramePosition(0);
        clip.setFramePosition(0);
        clip.start();
    }

    public void update() {
        if ((int) random(600) == 0) // throw in another asteroid occasionally
            Asteroid.spawn(animations.get("asteroid_lg"), 0, (int) random(HEIGHT));

        if ((int) random(850) == 0 && saucer == null) { // an enemy saucer suddenly appears!
            saucer = new Saucer();
            entities.add(0, saucer);
        }

        // loop thru a copy of the entities list so we can remove items
        currentEntities = new ArrayList<Entity>(entities);
        for (Entity e : currentEntities) {
            e.update(); // update the heading, velocity, and/or position of the entity
            e.check_collisions();
            if (!e.active)
                entities.remove(e);
        }
    }

    public void draw() {
        Graphics2D g = (Graphics2D) strategy.getDrawGraphics();
        g.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON));
        g.drawImage(background, 0, 0, null);
        for (Entity e : entities)
            e.draw(g);
        g.dispose();
        strategy.show();
    }
}